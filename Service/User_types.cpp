/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "User_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace com { namespace baichebao { namespace service {


User::~User() throw() {
}


void User::__set_uid(const int32_t val) {
  this->uid = val;
}

void User::__set_email(const std::string& val) {
  this->email = val;
}

void User::__set_uname(const std::string& val) {
  this->uname = val;
}

void User::__set_usex(const bool val) {
  this->usex = val;
}

void User::__set_uage(const int16_t val) {
  this->uage = val;
}

const char* User::ascii_fingerprint = "E1429FBEB33B4FF8E9E97EDE493A31C0";
const uint8_t User::binary_fingerprint[16] = {0xE1,0x42,0x9F,0xBE,0xB3,0x3B,0x4F,0xF8,0xE9,0xE9,0x7E,0xDE,0x49,0x3A,0x31,0xC0};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uname);
          this->__isset.uname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->usex);
          this->__isset.usex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->uage);
          this->__isset.uage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->uname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usex", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->usex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uage", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->uage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.email, b.email);
  swap(a.uname, b.uname);
  swap(a.usex, b.usex);
  swap(a.uage, b.uage);
  swap(a.__isset, b.__isset);
}

User::User(const User& other0) {
  uid = other0.uid;
  email = other0.email;
  uname = other0.uname;
  usex = other0.usex;
  uage = other0.uage;
  __isset = other0.__isset;
}
User& User::operator=(const User& other1) {
  uid = other1.uid;
  email = other1.email;
  uname = other1.uname;
  usex = other1.usex;
  uage = other1.uage;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const User& obj) {
  using apache::thrift::to_string;
  out << "User(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "email=" << to_string(obj.email);
  out << ", " << "uname=" << to_string(obj.uname);
  out << ", " << "usex=" << to_string(obj.usex);
  out << ", " << "uage=" << to_string(obj.uage);
  out << ")";
  return out;
}

}}} // namespace
